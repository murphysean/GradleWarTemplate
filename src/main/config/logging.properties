#Logging can be configured in the web application. The file will be WEB-INF/classes/logging.properties
#For more information visit http://tomcat.apache.org/tomcat-7.0-doc/logging.html

#The default implementation of java.util.logging provided in the JDK is too limited to be useful. A limitation of JDK
#Logging appears to be the inability to have per-web application logging, as the configuration is per-VM. As a result,
#Tomcat will, in the default configuration, replace the default LogManager implementation with a container friendly
#implementation called JULI, which addresses these shortcomings. It supports the same configuration mechanisms as the
#standard JDK java.util.logging, using either a programmatic approach, or properties files. The main difference is that
#per-classloader properties files can be set (which enables easy redeployment friendly webapp configuration), and the
#properties files support slightly extended constructs which allows more freedom for defining handlers and assigning
#them to loggers.
handlers=1${pom.artifactId}.org.apache.juli.FileHandler
.handlers=1${pom.artifactId}.org.apache.juli.FileHandler

#A handler's log level threshold is INFO by default and can be set using SEVERE, WARNING, INFO, CONFIG, FINE, FINER,
#FINEST or ALL. You can also target specific packages to collect logging from and specify a level.

1${pom.artifactId}.org.apache.juli.FileHandler.level=ALL

#This is the directory where the log files will be output to. Using the global ${catalina.base} environment variable
#will allow the application container to decide this
#On a side note, gradle will set this one to the same value ie catalina.base is literally set to '${catalina.base}' so
#that this remains unchanged after the config processor fills in the other values

1${pom.artifactId}.org.apache.juli.FileHandler.directory=${catalina.base}/logs

#The prefix property determines what the log files will start with, ie app.<date>.log

1${pom.artifactId}.org.apache.juli.FileHandler.prefix=${pom.artifactId}.

#org.apache.juli.FileHandler supports buffering of the logs. The buffering is not enabled by default. To configure it,
#use the bufferSize property of a handler. The value of 0 uses system default buffering (typically an 8K buffer will be
#used). A value of <0 forces a writer flush upon each log write. A value >0 uses a BufferedOutputStream with the
#defined value but note that the system default buffering will also be applied.

1${pom.artifcatId}.org.apache.juli.FileHandler.bufferSize=0
